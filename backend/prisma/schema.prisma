 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password_hash     String
  email_verified    Boolean   @default(false)
  account_status    String    @default("active") // active, suspended, deleted
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Relations
  jobs              CronJob[]
  sessions          UserSession[]

  @@map("users")
}

model CronJob {
  id                Int       @id @default(autoincrement())
  user_id           Int
  name              String
  url               String
  method            String    @default("GET") // GET, POST, PUT, DELETE, PATCH
  cron_expression   String
  timezone          String    @default("UTC")
  headers           Json?     // Store custom headers as JSON
  body              String?   // Request body for POST/PUT requests
  status            String    @default("active") // active, paused, deleted
  success_count     Int       @default(0)
  failure_count     Int       @default(0)
  last_execution    DateTime?
  next_execution    DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  executions        JobExecution[]
  
  // Indexes for performance
  @@index([user_id])
  @@index([status])
  @@index([next_execution])
  @@index([created_at])
  @@map("cron_jobs")
}

model JobExecution {
  id                Int       @id @default(autoincrement())
  job_id            Int
  executed_at       DateTime  @default(now())
  status            String    // success, failed, timeout, cancelled
  duration          Int?      // Execution time in milliseconds
  response_code     Int?      // HTTP response code
  response_body     String?   // Response body (truncated if too long)
  response_headers  Json?     // Response headers as JSON
  error_message     String?   // Error details if execution failed
  triggered_by      String    @default("cron") // cron, manual, api, retry
  
  // Relations
  job               CronJob   @relation(fields: [job_id], references: [id], onDelete: Cascade)
  
  // Indexes for performance
  @@index([job_id])
  @@index([executed_at])
  @@index([status])
  @@map("job_executions")
}

model UserSession {
  id                Int       @id @default(autoincrement())
  user_id           Int
  token_hash        String    @unique
  refresh_token     String    @unique
  expires_at        DateTime
  created_at        DateTime  @default(now())
  last_used         DateTime  @default(now())
  user_agent        String?   // Browser/device info
  ip_address        String?   // IP address for security
  
  // Relations
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  // Indexes for performance
  @@index([user_id])
  @@index([expires_at])
  @@index([token_hash])
  @@map("user_sessions")
}